// {{.GlobalGraph.GeneratedPrelude}}

package {{.GlobalGraph.GeneratedPkgName}}

import(
	{{ range .Imports -}}
	"{{. -}}"
	{{ end -}}
  {{template "imports" .TargetNode -}}
	"fmt"
	"strings"
  "errors"
)

{{ $entPkgName := .GlobalGraph.EntPkgName -}}
{{ $graph := .GlobalGraph -}}
{{ $nodeName := .TargetNode.Name -}}
{{ $filterPkgName := "filter" -}}
{{ $entPredicatePkgName := "predicate" -}}
{{ $nodePredicatePkgName := .EntNodePredicatePkgName -}}
{{ $entClientType := printf "*%s.%s" $entPkgName "Client" -}}

/*{ the number is meanning less. I just use it as mark to jump between the code
1တ   | struct {{$nodeName}}: as the model in db
2တ   | func (*{{$nodeName}})FromEnt{{$nodeName}}: convert model in ent to curdboy node model
3တ   | func {{.GenerateCreateFuncName}}: func to create node
4တ   | func {{.GeneratedQueryFuncName}}: func to query nodes by pages
5တ   | func {{.GeneratedCountFuncName}}: func to count nodes
51တ  | func {{.GeneratedUpdateFuncName}}: func to update nodes
52တ  | func {{.GeneratedDeleteFuncName}}: func to update nodes
6တ   | func ParseFilterTo{{$nodeName}}Predicate: func to parse fitler string to node predicate
တ7   | functions to convert field value from interface to real type
တ8   | parse fields expr to field selector object which is used to select the field we want to query
}*/

// { 
// 1တ
type {{$nodeName}} struct{
{{template "curdNodeGenerateFields" .TargetNode -}}
{{template "curdNodeGenerateEdges" (buildMap "TargetNode" .TargetNode "AllNodes" $graph.Graph.Nodes) -}}
}

// 2တ
func (this *{{$nodeName}})FromEnt{{$nodeName}}(base *{{$entPkgName}}.{{$nodeName}},selector *{{$nodeName}}FieldsSelector)error{
  {{ range .TargetNode.AllFldsIncludePK }}
  {{$field:=.}}
    {{if eq $field.Type.String "time.Time"}}
      this.{{$field.StructField}} = Time(base.{{$field.StructField}})
    {{else}}
      this.{{$field.StructField}} = base.{{$field.StructField}}
    {{end}}
  {{end}}

  {{ range .TargetNode.Edges }}
  {{$edge:=.}}
  {{$relation := $edge.Rel.Type.String }}
  {{ if eq $relation "M2O"}}
     if base.Edges.{{$edge.Type.Name}} != nil{
         e := {{$edge.Type.Name}}{}
         if err := e.FromEnt{{$edge.Type.Name}}(base.Edges.{{$edge.Type.Name}},nil);err != nil{
          return err
         }
         this.{{ capitalFirstLetter $edge.Name }} = &e
     }
  {{else if eq $relation "O2M" }}
    {
      if base.Edges.{{capitalFirstLetter $edge.Name}} != nil{
        list := make([]*{{$edge.Type.Name}},0,len(base.Edges.{{capitalFirstLetter $edge.Name}}))
        for _, v:= range base.Edges.{{capitalFirstLetter $edge.Name}}{
          c := &{{$edge.Type.Name}}{}
          if err := c.FromEnt{{$edge.Type.Name}}(v,nil);err != nil{
            return err
          }
          list = append(list,c)
        }
        this.{{capitalFirstLetter $edge.Name}} = list
      }
    }
  {{else}}
    {{error "unhandled relation type `%s`" $relation }}
  {{end}}
  {{end}}

  {{- range $graph.GetEdgesAlias $nodeName -}}
  {{- $edgeAlias := . -}}
  {{- $edge := $edgeAlias.To -}}
  {{- $edgeNode := $edge.Type }}
  if selector.{{$edgeAlias.Alias}}Edges != nil{
    {{ if or (eq $edge.Rel.Type.String "O2O") (eq $edge.Rel.Type.String "M2O")}}
      edgeNode := &{{$edge.Type.Name}}{}
      err := edgeNode.FromEnt{{$edge.Type.Name}}(base.Edges.{{ToFirstCharacterUpper $edge.Name}},selector.{{$edgeAlias.Alias}}Edges)
      if err != nil{
        return err
      }
    this.{{ToFirstCharacterUpper $edgeAlias.Alias }} = edgeNode
    {{ else if or (eq $edge.Rel.Type.String "O2M") (eq $edge.Rel.Type.String "M2M")}}
      edgeNodes := make([]*{{$edge.Type.Name}},0,len(base.Edges.{{ToFirstCharacterUpper $edge.Name}}))
      for _,v := range base.Edges.{{ToFirstCharacterUpper $edge.Name}}{
        edgeNode := &{{$edge.Type.Name}}{}
        err := edgeNode.FromEnt{{$edge.Type.Name}}(v,selector.{{$edgeAlias.Alias}}Edges)
        if err != nil{
          return err
        }
        edgeNodes = append(edgeNodes,edgeNode)
      }
      this.{{ToFirstCharacterUpper $edgeAlias.Alias }} = edgeNodes
    {{else}}
      generate error: undefined ent relation type: {{$edge.Rel.Type.String}}
    {{end}}
  }
  {{end }}
  return nil
}

// }

// { CURD
// 3တ 
func {{.GenerateCreateFuncName}} (ctx context.Context,fieldsData map[string]interface{},entCli *{{ $entPkgName }}.Client)(id {{ template "fieldTypeStr" .TargetNode.ID.Type.Type }},outErr error){
  mutation := entCli.{{ $nodeName }}.Create()
  for k,v := range fieldsData {
    _ = v
    switch k {
    {{- range .TargetNode.AllFldsIncludePK -}}
    {{- $field := . -}}
    {{ if $field.UserDefined }}
    case "{{ $field.Name }}":
      value,err := {{$nodeName}}{{$field.StructField}}ValueFromInterface(v)
      if err != nil {
        outErr = fmt.Errorf("field {{$field.Name}} type not match for node {{$nodeName}}: %w",err)
        return 
      }
      mutation.Set{{ $field.StructField }}(value)
    {{- else }}
      case "{{$field.Name}}":
      outErr = fmt.Errorf("field {{$field.Name}} is auto generated, do not set value to the field")
      return
    {{- end -}}
    {{- end }}
    default:
      outErr = fmt.Errorf("undefined field %s for node {{$nodeName}}",k)
      return 
    }
  }
  record,err := mutation.Save(ctx)
  if err != nil {
    var validateErr *{{$entPkgName}}.ValidationError
    if errors.As(err, &validateErr){
      outErr = &Error{
        Code: ErrInvalidRequestParam,
        Reason: "Invalid Request Param",
        Message: err.Error(),
      }
      return
    }
    outErr = err
    return
  }
  return record.{{.TargetNode.ID.StructField}},nil
}

func {{.GenerateCreateFuncName}}WithStruct (ctx context.Context,client *{{ $entPkgName }}.Client ,entity *{{$nodeName}})(id {{ template "fieldTypeStr" .TargetNode.ID.Type.Type }},outErr error){
  mutation := client.{{ $nodeName }}.Create()
    {{- range .TargetNode.AllFldsIncludePK -}}
    {{- $field := . -}}
    {{ if $field.UserDefined }}
      {{if eq $field.Type.String "time.Time" }}
        mutation.Set{{ $field.StructField }}(time.Time(entity.{{$field.StructField}}))
      {{else}}
        mutation.Set{{ $field.StructField }}(entity.{{$field.StructField}})
      {{end}}
    {{- end -}}
    {{- end }}

    {{range .TargetNode.Edges}}
      {{$edge := .}}
      {{ if eq $edge.Rel.Type.String "M2O" }}
        if entity.{{ capitalFirstLetter $edge.Name }} != nil{
          mutation.Set{{capitalFirstLetter $edge.Name}}ID(entity.{{capitalFirstLetter $edge.Name}}.ID)
        }
      {{else}}
        if entity.{{ capitalFirstLetter $edge.Name }} != nil{
          outErr = fmt.Errorf("unimpl create with {{$edge.Rel.Type.String}} edge, node: {{$nodeName}},edge {{$edge.Name}}")
          return
        }
      {{ end }}
    {{end}}

    record,err := mutation.Save(ctx)
    if err != nil {
      var validateErr *{{$entPkgName}}.ValidationError
      if errors.As(err, &validateErr){
        outErr = &Error{
          Code: ErrInvalidRequestParam,
          Reason: "Invalid Request Param",
          Message: err.Error(),
        }
        return
      }
      outErr = err
      return
    }
    return record.{{.TargetNode.ID.StructField}},nil
}


// 4တ 
func {{.GeneratedQueryFuncName}} (ctx context.Context,entCli {{$entClientType}} , req *{{.GlobalGraph.Generated_QueryRequestStructName}})([]*{{$nodeName}},error ){
	var pred {{$entPredicatePkgName}}.{{$nodeName}}
	if len(req.Filter) > 0{
    var err error
    pred,err = ParseFilterTo{{$nodeName}}Predicate(req.Filter)
		if err != nil{
			return nil,err
		}
	}
	query := entCli.{{$nodeName}}.Query().Limit(req.PageSize).Offset(req.PageIndex * req.PageSize)
	if pred != nil{
		query = query.Where(pred)
	}

  // { fields selector
  fldSelector,err := Parse{{$nodeName}}FieldsSelector(req.Fields)
  if err != nil{
    return nil,err
  }
  // }

	records,err :=  query.All(ctx)
  if err != nil{
    return nil,err
  }
  // { convert to our node struct
  nodes := make([]*{{$nodeName}},0,len(records))
  for _,r := range records{
    node := &{{$nodeName}}{}
    err := node.FromEnt{{$nodeName}}(r,fldSelector)
    if err != nil{
      return nil,err
    }
    nodes = append(nodes,node)
  }
  // }

  return nodes,nil
}

func {{.GeneratedQueryFuncName}}WithOp (ctx context.Context,entCli {{$entClientType}} , req *{{.GlobalGraph.Generated_QueryRequestStructName}},op func(mutation *{{$entPkgName}}.{{$nodeName}}Query))([]*{{$nodeName}},error) {
	var pred {{$entPredicatePkgName}}.{{$nodeName}}
	if len(req.Filter) > 0{
    var err error
    pred,err = ParseFilterTo{{$nodeName}}Predicate(req.Filter)
		if err != nil{
			return nil,err
		}
	}
	query := entCli.{{$nodeName}}.Query().Limit(req.PageSize).Offset(req.PageIndex * req.PageSize)
	if pred != nil{
		query = query.Where(pred)
	}

  // { fields selector
  fldSelector,err := Parse{{$nodeName}}FieldsSelector(req.Fields)
  if err != nil{
    return nil,err
  }
  // }

  if op != nil{
    op(query)
  }

	records,err :=  query.All(ctx)
  if err != nil{
    return nil,err
  }
  // { convert to our node struct
  nodes := make([]*{{$nodeName}},0,len(records))
  for _,r := range records{
    node := &{{$nodeName}}{}
    err := node.FromEnt{{$nodeName}}(r,fldSelector)
    if err != nil{
      return nil,err
    }
    nodes = append(nodes,node)
  }
  // }

  return nodes,nil
}

// 5တ 
func {{.GeneratedCountFuncName}} (ctx context.Context,entCli {{$entClientType}},filter string)(int,error){
  query := entCli.{{$nodeName}}.Query()
  if len(filter)>0{
    pred,err := ParseFilterTo{{$nodeName}}Predicate(filter)
    if err != nil{
      return 0, err
    }
    query.Where(pred)
  }
  return query.Count(ctx)
}

// 51တ 
func {{.GeneratedUpdateFuncName}} (ctx context.Context,entCli {{$entClientType}},req *{{.GlobalGraph.Generated_UpdateRequestStructName}})(error){
  mutation := entCli.{{$nodeName}}.Update()
  if len(req.Filter) > 0{
    pred,err := ParseFilterTo{{$nodeName}}Predicate(req.Filter)
    if err != nil{
      return err
    }
    mutation.Where(pred)
  }
  for field,v := range req.Data{
    _ = v
    switch field {
    {{ range .TargetNode.AllFldsIncludePK -}}
    {{ $field := . -}}
    {{ if $field.UserDefined -}}
      case "{{$field.Name}}":
      {{if not $field.Immutable}}
        value,err := {{$nodeName}}{{$field.StructField}}ValueFromInterface(v)
        if err != nil {
          err = fmt.Errorf("field {{$field.Name}} type not match for node {{$nodeName}}: %w",err)
          return err
        }
        mutation.Set{{ $field.StructField }}(value)
      {{else}}
      return fmt.Errorf("field {{$field.Name}} is immutable")
      {{end}}
    {{ else }}
    case "{{$field.Name}}":
    err := fmt.Errorf("field {{$field.Name}} is auto generated, do not set value to the field")
    return err
    {{ end}}
    {{- end}}
    default:
      return fmt.Errorf("undefined field < %s > for node < {{$nodeName}} >",field)
    }
  }
  _,err := mutation.Save(ctx)
  return err
}

func {{.GeneratedUpdateFuncName}}WithStruct(
ctx context.Context,
client *{{$entPkgName}}.Client,
id {{ template "fieldTypeStr" .TargetNode.ID.Type.Type }} ,
entity *{{$nodeName}},
)error{
  mutation := client.{{$nodeName}}.Update()
  mutation.Where({{$nodePredicatePkgName}}.IDEQ(id))

  {{ range .TargetNode.AllFldsIncludePK -}}
  {{ $field := . -}}
  {{ if $field.UserDefined -}}
  {{ if not $field.Immutable }}
    {{if eq $field.Type.String "time.Time" }}
      mutation.Set{{$field.StructField}}(time.Time(entity.{{$field.StructField}}))  
    {{else}}
      mutation.Set{{$field.StructField}}(entity.{{$field.StructField}})  
    {{end}}
  {{end}}
  {{ end }}
  {{- end}}

  {{ range .TargetNode.Edges }}
  {{ $edge := . }}
  {{ if eq $edge.Rel.Type.String "M2O" }}
  if entity.{{capitalFirstLetter $edge.Name}} == nil{
    mutation.Clear{{capitalFirstLetter $edge.Name }}()
  }else{
    mutation.Set{{capitalFirstLetter $edge.Name }}ID(entity.{{capitalFirstLetter $edge.Name}}.ID)
  }
  {{ end }}
  {{ end }}



  _,err := mutation.Save(ctx)
  return err
}

// 52တ
func {{.GeneratedDeleteFuncName}} (ctx context.Context,entCli {{$entClientType}},filter string)(error){
  del := entCli.{{$nodeName}}.Delete()
  if len(filter) > 0{
    pred,err := ParseFilterTo{{$nodeName}}Predicate(filter)
    if err != nil{
      return err
    }
    del.Where(pred)
  }
  _,err := del.Exec(ctx)
  return err
}
// }



// { Prase filter to node predicate
// 6တ 
func ParseFilterTo{{$nodeName}}Predicate(filterStr string)({{$entPredicatePkgName}}.{{$nodeName}},error){
  if len(filterStr) == 0{
    return nil,fmt.Errorf("length of filter can not be 0")
  }
  filterExpr,err := {{$filterPkgName}}.ParseFilter(filterStr)
  if err != nil{
    return nil,err
  }
  pred,err := To{{$nodeName}}Predicate(filterExpr)
  if err != nil{
    return nil,err
  }
  return pred,nil
}

{{$filterVisitorName := (printf "FilterVisitor%s" $nodeName) }}

func To{{$nodeName}}Predicate(filterExpr {{$filterPkgName}}.Expr)({{$entPredicatePkgName}}.{{$nodeName}},error){
visitor := &{{$filterVisitorName}}{}
  v,err := filterExpr.Accept(visitor)
  if err != nil {
    return nil,err
  }
  return visitor.predicateFromVisitorResult(v),nil
}

type {{$filterVisitorName}} struct{}

func (this *{{$filterVisitorName}}) predicateFromVisitorResult(v interface{})({{$entPredicatePkgName}}.{{$nodeName}}){
	return v.({{$entPredicatePkgName}}.{{$nodeName}})
}

func(this *{{$filterVisitorName}})	VisitBinaryLogicalExpr(expr *{{$filterPkgName}}.BinaryLogicalExpr)(interface{},error){
	var logicalOperator = expr.Op

	left,err := expr.Left.Accept(this)
	if err != nil{
		return nil,err
	}
	right,err := expr.Right.Accept(this)
	if err != nil{
		return  nil,err
	}

	leftPred :=  this.predicateFromVisitorResult(left)
	rightPred :=  this.predicateFromVisitorResult(right)

	switch logicalOperator.Tpe{
		case {{$filterPkgName}}.TokenType_KW_And:
		return {{$nodePredicatePkgName}}.And(
			leftPred,
			rightPred,
		), nil
		case {{$filterPkgName}}.TokenType_KW_Or:
		return {{$nodePredicatePkgName}}.Or(
			leftPred,
			rightPred,
		), nil

	default:
		return nil,fmt.Errorf("unexptect logical operator %s",expr.Op.Literal)
	}
}

func(this *{{$filterVisitorName}})	VisitComparisionExpr(expr *{{$filterPkgName}}.ComparisionExpr)(interface{},error){
	paths := strings.Split(expr.Left.GetStringValue(),".")
	if len(paths) == 1{
		var field = paths[0]
		switch field {
		{{ range .TargetNode.AllFldsIncludePK}}
		{{ $field := . }}
		case "{{$field.Name}}":
			switch expr.Op.Tpe {
				case {{$filterPkgName}}.TokenType_KW_Eq:
					  {{ template "generatePredicate" (buildGenPredicateParam $field "EQ")}}
				case {{$filterPkgName}}.TokenType_KW_Ne:
					{{ template "generatePredicate" (buildGenPredicateParam $field "NEQ")}}
				case {{$filterPkgName}}.TokenType_KW_Lt:
					{{- if eq $field.Type.Type.String "bool" -}}
            return nil ,fmt.Errorf("field {{$field.StructField}} of node {{$nodeName}} is bool type, can not use `le` operator")
          {{- else -}}
					  {{ template "generatePredicate" (buildGenPredicateParam $field "LT")}}
          {{- end }}
				case {{$filterPkgName}}.TokenType_KW_Le:
					{{- if eq $field.Type.Type.String "bool" -}}
            return nil ,fmt.Errorf("field {{$field.StructField}} of node {{$nodeName}} is bool type, can not use `le` operator")
          {{- else -}}
					  {{ template "generatePredicate" (buildGenPredicateParam $field "LTE")}}
          {{- end }}
				case {{$filterPkgName}}.TokenType_KW_Gt:
					{{- if eq $field.Type.Type.String "bool" -}}
            return nil ,fmt.Errorf("field {{$field.StructField}} of node {{$nodeName}} is bool type, can not use `gt` operator")
          {{- else -}}
					  {{ template "generatePredicate" (buildGenPredicateParam $field "GT")}}
          {{- end }}
				case {{$filterPkgName}}.TokenType_KW_Ge:
					{{- if eq $field.Type.Type.String "bool" -}}
            return nil ,fmt.Errorf("field {{$field.StructField}} of node {{$nodeName}} is bool type, can not use `ge` operator")
          {{- else -}}
					  {{ template "generatePredicate" (buildGenPredicateParam $field "GTE")}}
          {{- end }}
				case {{$filterPkgName}}.TokenType_KW_Like:
					{{- if eq $field.Type.Type.String "string" -}}
					{{ template "generatePredicate" (buildGenPredicateParam $field "Contains")}}
					{{- else -}}
					return nil,fmt.Errorf("field {{$field.StructField}} of node {{$nodeName}} is not string type, cannot use like operator")
					{{- end }}
				default: 
					return nil, fmt.Errorf("unexptected comparision operator %s",expr.Op.Literal)
			}
		{{end}}
		default:
			return nil, fmt.Errorf("undefined field < %s > for node < %s >",field,"{{$nodeName}}")
		}
	}else{ // filter for edge alias
    edge := paths[0]
    // check if edge alias exists
    switch edge{
    {{ range $graph.GetEdgesAlias $nodeName -}}
    {{$edgeAlias := .}}
    case "{{$edgeAlias.Alias}}": // find the matched node by the edge alias
      p,err := ParseFilterTo{{$edgeAlias.To.Type.Name}}Predicate(
        fmt.Sprintf(
          "%s %s %s",
          strings.Join(paths[1:],"."),
          expr.Op.Literal,
          expr.Right.Literal,
        ),
      )
      if err != nil{
        return nil,err
      }
      return {{$nodePredicatePkgName}}.Has{{ ToFirstCharacterUpper $edgeAlias.To.Name }}With(p), nil
    {{end}}
    default:
      return nil,fmt.Errorf("undefined edge alis < %s > for node < {{$nodeName}}>",edge)
    }
	}
}

func(this *{{$filterVisitorName}})	VisitUnaryExpr(expr *{{$filterPkgName}}.UnaryExpr)(interface{},error){
	var operator = expr.Op
	result,err := expr.Expr.Accept(this)
	if err != nil{
		return nil, err
	}
	switch operator.Tpe{
		case {{$filterPkgName}}.TokenType_KW_Not:
    return {{$nodePredicatePkgName}}.Not(this.predicateFromVisitorResult(result)),nil
		default:
			return nil, fmt.Errorf("unexptect unary operator %s",operator.Literal)
	}
}

// }



// {
{{- define "generatePredicate" }}
				{{- $field := .Field -}}
				{{- $op := .Op -}}
				{{- $nodeName := .NodeName}}
				{{- $nodePredicatePkgName := .NodePredicatePkgName}}
				{{- if eq $field.Type.Type.String "string"  -}}
					if expr.Right.IsNumber(){
						return  nil,fmt.Errorf("the field {{$field.Name}} of node {{$nodeName}} type not matched, expect string but get number")
					}
					return {{$nodePredicatePkgName}}.{{$field.StructField}}{{$op}}(expr.Right.GetStringValue()),nil
				{{- else if  eq $field.Type.Type.String "int" -}}
					if !expr.Right.IsNumber(){
						return nil,fmt.Errorf("the field {{$field.Name}} of node {{$nodeName}} type not matched, expect number but get string")
					}
					return {{$nodePredicatePkgName}}.{{$field.StructField}}{{$op}}(int(expr.Right.GetNumberValue())),nil
				{{- else if eq $field.Type.Type.String "int32" -}}
					if !expr.Right.IsNumber(){
						return nil,fmt.Errorf("the field {{$field.Name}} of node {{$nodeName}} type not matched, expect number but get string")
					}
					return {{$nodePredicatePkgName}}.{{$field.StructField}}{{$op}}(int32(expr.Right.GetNumberValue())),nil
					
				{{- else if eq $field.Type.Type.String "int64" -}}
					if !expr.Right.IsNumber(){
						return nil,fmt.Errorf("the field {{$field.Name}} of node {{$nodeName}} type not matched, expect number but get string")
					}
					return {{$nodePredicatePkgName}}.{{$field.StructField}}{{$op}}(int64(expr.Right.GetNumberValue())),nil

				{{- else if eq $field.Type.Type.String "float" -}}
					if !expr.Right.IsNumber(){
						return nil,fmt.Errorf("the field {{$field.Name}} of node {{$nodeName}} type not matched, expect number but get string")
					}
					return {{$nodePredicatePkgName}}.{{$field.StructField}}{{$op}}(float(expr.Right.GetNumberValue())),nil

				{{- else if eq $field.Type.Type.String "float32" -}}
					if !expr.Right.IsNumber(){
						return nil,fmt.Errorf("the field {{$field.Name}} of node {{$nodeName}} type not matched, expect number but get string")
					}
					return {{$nodePredicatePkgName}}.{{$field.StructField}}{{$op}}(float32(expr.Right.GetNumberValue())),nil

				{{- else if eq $field.Type.Type.String "float64" -}}
					if !expr.Right.IsNumber(){
						return nil,fmt.Errorf("the field {{$field.Name}} of node {{$nodeName}} type not matched, expect number but get string")
					}
					return {{$nodePredicatePkgName}}.{{$field.StructField}}{{$op}}(float64(expr.Right.GetNumberValue())),nil
        {{- else if eq $field.Type.Type.String "time.Time" -}}
          // The time value format is  yy-mm-dd hh:mm:ss 
          if !expr.Right.IsString(){
            return nil, fmt.Errorf("the field {{$field.Name}} of node {{$nodeName}} type is time, the value format must be like: 1970-11-11 11:11:11")
          }
          t,err := sdktime.ParseFromYYYY_MM_DD_HH_MM_SS(expr.Right.GetStringValue());
          if err != nil{
            return nil, fmt.Errorf("failed to parse time '%s': %w",expr.Right.GetStringValue(),err)
          }
          return {{$nodePredicatePkgName}}.{{$field.StructField}}{{$op}}(t), nil
        {{- else if eq $field.Type.Type.String "bool" -}}
          if !expr.Right.IsString(){
            return nil, fmt.Errorf("the field {{$field.Name}} of node {{$nodeName}} type must be bool")
          }
          b := expr.Right.GetStringValue() == "true"
          return {{$nodePredicatePkgName}}.{{$field.StructField}}{{$op}}(b), nil
				{{- else -}}
					Unexpected node.Field.Type {{$field.Type.Type.String}}
				{{- end }}
{{- end }}

// }

// { တ7 functions to convert field value from interface to the real type
{{- define "fieldTypeStr" -}}
  {{.String}}
{{- end }}

{{ range .TargetNode.AllFldsIncludePK -}}
  {{- $field := . }}
func {{$nodeName}}{{$field.StructField}}ValueFromInterface(v interface{})(value {{ template "fieldTypeStr" $field.Type.Type}},err error){
  {{$fieldTypeInGoTypeStr := $field.Type.Type.String }} // TODO sync with fieldTypeStr
  var ok bool
  {{template "entFieldValueFromInterface" $field}}
  if !ok {
    err = fmt.Errorf("The type of The field <$field.Name> of node < {{$nodeName}}> is  {{$fieldTypeInGoTypeStr}}")
    return
  }

  return
}
{{ end }}
// }

{{define "entFieldValueFromInterfaceSwitch"}}
  switch assertedV:=v.(type){
  case int:
    ok = true
    value = {{.}}(assertedV)
  case int32:
    ok = true
    value = {{.}}(assertedV)
  case int64:
    ok = true
    value = {{.}}(assertedV)
  case float32:
    ok = true
    value = {{.}}(assertedV)
  case float64:
    ok = true
    value = {{.}}(assertedV)
  }
{{end}}

{{define "entFieldValueFromInterface"}}
  {{$field:=.}}
  {{ if eq ($field.Type.String) "int32" }}
    {{template "entFieldValueFromInterfaceSwitch" "int32"}}
  {{ else if eq ($field.Type.String) "int64"}}
    {{template "entFieldValueFromInterfaceSwitch" "int64"}}
  {{ else if eq ($field.Type.String) "int"}}
    {{template "entFieldValueFromInterfaceSwitch" "int"}}
  {{ else if eq ($field.Type.String) "string"}}
    value,ok = v.(string)
  {{end}}
{{end}}


// { တ8 parse fields expr to field selector object which is used to select the field we want to query
func Parse{{$nodeName}}FieldsSelector(fieldsStr string)(*{{$nodeName}}FieldsSelector,error){
  fields := strings.Split(fieldsStr,",")
  selector := &{{$nodeName}}FieldsSelector{
    Fields: make([]string,0,len(fields)),
  }
  for _,f := range fields {
    err := selector.AddField(f)
    if err != nil{
      return nil, err
    }
  }
  return selector,nil
}

type {{$nodeName}}FieldsSelector struct{
  SelectAllField bool
  Fields []string
  {{- range $graph.GetEdgesAlias $nodeName -}}
  {{- $edgeAlias := . -}}
  {{- $edgeNode := $edgeAlias.To.Type}}
  {{$edgeAlias.Alias}}Edges *{{$edgeNode.Name}}FieldsSelector
  {{end}}
}

func (this *{{$nodeName}}FieldsSelector) AddField(field string) error{
  elems := strings.Split(field,".")
  if  len(elems) == 1{
    f := elems[0]
    if f == "*"{
      this.SelectAllField = true
      return nil
    }
    this.Fields = append(this.Fields,f)
  }else{
      edgeAlias := elems[0]
      switch edgeAlias{
        {{range $graph.GetEdgesAlias $nodeName -}}
          {{$edgeAlias := .}}
          {{- $edge := $edgeAlias.To -}}
          {{- $edgeNode := $edge.Type }}
          case "{{$edgeAlias.Alias}}":
          f := strings.Join(elems[1:],".")
          if this.{{$edgeAlias.Alias}}Edges == nil{
            var err error
            this.{{$edgeAlias.Alias}}Edges,err = Parse{{$edgeNode.Name}}FieldsSelector(strings.Join(elems[1:],"."))
            if err != nil{
              return err
            }
          }else{
            err := this.{{$edgeAlias.Alias}}Edges.AddField(f)
            if err != nil{
              return err
            }
          }
        {{end -}}
        default:
          return fmt.Errorf("undefined edge alias %s for node {{$nodeName}}",edgeAlias)
      }
  }
  return nil
}

func (this *{{$nodeName}}FieldsSelector) Select(query *{{$entPkgName}}.{{$nodeName}}Query)error{
  if !this.SelectAllField{
    query.Select(this.Fields...)
  }
  {{- range $graph.GetEdgesAlias $nodeName -}}
    {{- $edgeAlias := . -}}
    {{- $edge := $edgeAlias.To -}}
    {{- $edgeNode := $edge.Type }}
    if this.{{$edgeAlias.Alias}}Edges != nil{
      query.With{{ ToFirstCharacterUpper $edge.Name }}(
        func(query *{{$entPkgName}}.{{$edgeNode.Name}}Query){
           this.{{$edgeAlias.Alias}}Edges.Select(query)
        },

      )
    }
  {{end }}
  return nil
}

// }
