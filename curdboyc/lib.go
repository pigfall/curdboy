package curdboyc

import(
	"embed"
	"path"
	"os"
	"github.com/fatih/color"
	"fmt"
 ent "github.com/pigfall/ent_utils"
 
	"golang.org/x/tools/go/packages"
)

//go:embed tpls/*
var templates embed.FS


type CURDGraphGenerator struct{
	config *Config
	Graph *ent.Graph
	Module  *packages.Module // the user's module
	CURDBoyModuelPath string
}

func NewCURDGraphGenerator (config *Config)*CURDGraphGenerator{
	return &CURDGraphGenerator{
		config:config,
		CURDBoyModuelPath: "github.com/pigfall/curdboy",// TODO query by program
	}
}

// top generate function to generate curdboy core code
func (this *CURDGraphGenerator) Generate()error{
	// { load ent graph
	graph,err := ent.LoadGraph(this.config.entSchemaDirPath)
	if err != nil {
		err = fmt.Errorf("Failed to load ent graph from dir path < %s >: < %s > \n",color.New(color.FgRed).SprintFunc()(this.config.entSchemaDirPath),color.New(color.FgRed).SprintFunc()(err.Error()))
		return err
	}
	// }

	this.Graph = graph

	// {
	pkgs, err := packages.Load(&packages.Config{
		Mode: packages.NeedName | packages.NeedTypes | packages.NeedTypesInfo | packages.NeedModule,
	}, this.config.entSchemaDirPath)
	if len(pkgs) == 0{
		return fmt.Errorf("Failed to get module path")
	}
	module :=  pkgs[0].Module
	if module == nil{
		return fmt.Errorf("Unexpected module is nil")
	}
	if len(module.Path )== 0{
		return fmt.Errorf("Unexpected module path is empty")
	}
	this.Module = module
	// }

	err = os.MkdirAll(this.TargetDirPath(),os.ModePerm)
	if err != nil{
		return fmt.Errorf("Failed to mkdir for target path %s",this.TargetDirPath())
	}

	// { generate curd param
	err = NewCURDParamGenerator(this).Generate()
	if err != nil{
		err = fmt.Errorf("Failed to generate curd parma code: < %s> ",color.New(color.FgRed).SprintFunc()(err.Error()))
		return err
	}

	// }

	// { generate curd for each node
	for _,node := range graph.GetNodes(){
		err := NewCURDNodeGenerator(node,this).Generate()
		if err != nil{
			return err
		}
	}
	// }

	return nil
}

func (this *CURDGraphGenerator) Generated_QueryRequestStructName() string{
	return `QueryRequest`
}

// which directory path to save the generated files
func (this *CURDGraphGenerator) TargetDirPath()string{
	return this.config.targetDirPath
}

func (this *CURDGraphGenerator) GeneratedPrelude()string{
	return `do not edit, auto generated by curdboy`
}

func (this *CURDGraphGenerator) GeneratedPkgName() string{
	return "curd"
}

//eg: package ent_generated
func (this *CURDGraphGenerator) EntPkgName() string {
	return path.Base(this.config.entTargetDirPath)
}

// eg: <project>/ent/ent_generated
func (this *CURDGraphGenerator) EntPkgPath() string{
	return path.Join(this.Module.Path,this.config.entTargetDirPath)
}

// 
func (this *CURDGraphGenerator) FilterParserPkgPath() string{
	return path.Join(this.CURDBoyModuelPath,"pkgs/filter")
}

func (this *CURDGraphGenerator) EntPredicatePkgPath() string{
	return path.Join(this.EntPkgPath(),"predicate")

}
